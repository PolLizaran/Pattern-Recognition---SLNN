%{
Output:
- Xtr: Matrix of training samples generated by 'uo_nn_dataset.m'.
- ytr: Binary output vector representing whether the i-th training sample is
       contained in 'num_target'.
- wo: Vector of optimal weights that minimize the Loss Function.
- fo: Value of the Loss Function on 'wo'.
- tr_acc: Percentage of success
                        correct wises training samples.
- Xte: Matrix of test samples, that will only be used to compute 'te_acc'
       once the model is fitted.
- yte: Binary output vector representing whether the i-th test sample is
       contained in 'num_target'.
- te_acc: Percentage of success
                        correct wises using test samples.
- niter: Number of iterations that take the algorithm to converge to the
         solution.
- tex: Running time of the algorithm.

Input: 
- num_target: Set of digits to be identified.
- tr_freq: Frequency of the digit target in the dataset.
- tr_seed: Seed for the Matlab random generator of the training set.
- tr_p: Dimension of the training set.
- te_seed: Seed for the Matlab random generator of the test set.
- te_q: Dimension of the test set.
- la: Regulatization parameter of the Ridge Regression.
- epsG: Minimum value of the gradient norm as a stopping criteria.
- kmax: Maximum number of iterations as a stopping criteria.
- ils: Parameter that indicates the line search method to be used. 
       (ils = 1 -> ELS, ils = 2 -> BLS, ils = 3 -> BLSNW32) 
- ialmax: Maximum step length
- kmaxBLS: Maximum number of iterations as a stopping criteria of BLSNW32.
- epsal: Minimum variation between consecutive reductions of k-th step length.
- c1,c2: Wolfe constants. 
- isd: Method to be used. 
- sg_al0: Initial step length for the SGM.
- sg_be: Parameter to compute the step length for the SGM.
- sg_ga: Parameter to define the size of the minibatch (set of examples)
- sg_emax: Stopping criteria of the SGM.
- sg_ebest: Stopping criteria of the SGM.
- sg_seed: 
- icg: Parameter that indicates the method used to compute the 'beta' in
       CGM.
- irc: Restart condition of CGM
- nu: Parameter for the RC2 of CGM
%}

function [Xtr,ytr,w_opt,L_opt,tr_acc,Xte,yte,te_acc,niter,tex] = ...
          uo_nn_solve(num_target,tr_freq,tr_seed,tr_p,te_seed,te_q,la,epsG,kmax,ils,ialmax,kBLSmax,epsal, ...
                      c1,c2,isd,sg_al0,sg_be,sg_ga,sg_emax,sg_ebest,sg_seed,icg,irc,nu)
    fprintf(' \n Inici  [uo_nn_solve.m]\n'); 
    tic;

    % Creation of data
    [Xtr, ytr] = uo_nn_dataset(tr_seed, tr_p, num_target, tr_freq); % Training
    
    [Xte, yte] = uo_nn_dataset(te_seed, te_q, num_target, 0);       % Test

    % Definition of some parameters
    sig = @(X) 1./(1+exp(-X));
    y = @(X,w) sig(w'*sig(X));
    L = @(w,X,Y,la) (norm(y(X,w)-Y)^2)/size(Y,2)+ (la*norm(w)^2)/2;
    gL = @(w,X,Y,la) (2*sig(X)*((y(X,w)-Y).*y(X,w).*(1-y(X,w)))')/size(Y,2)+la*w;
    w_0 = zeros(35, 1);

    % Not needed as we use FDM
    hL = [];                    
    ialmin = 0; rho = 0.0; 

    % Computation of w_opt
    if isd == 1 % GM 
        fprintf('Apliquem GM \n');
        [wk] = ...
          GM(w_0, Xtr, ytr, la, L, gL, hL, epsG, kmax, ialmax, ialmin, rho, c1, c2, ils,  kBLSmax, epsal);
        w_opt = wk(:,end);
    elseif isd == 3 % BFGS
        fprintf('Apliquem BFGS \n');
        [wk] = ...
            BFGS(w_0, Xtr, ytr, la, L, gL, hL, epsG, kmax, ialmax, ialmin, rho, c1, c2, ils, kBLSmax, epsal);
        w_opt = wk(:,end);
    elseif isd == 7 % SGM
        fprintf('Apliquem SGM \n');
        [w_opt, wk, k] = ...
           SGM(w_0, la, L, gL, Xtr, ytr, Xte, yte, sg_al0, sg_be, sg_ga, sg_emax, sg_ebest, sg_seed);
    end

    L_opt = L(w_opt, Xtr, ytr, la);

    % Calling of functions to compuute the result of the model (y)

    delta_tr = (round(y(Xtr, w_opt)) == ytr);       % Training accuracy
    tr_acc = 100/tr_p * sum(delta_tr);
    
    delta_te = (round(y(Xte, w_opt)) == yte);       % Test accuracy
    te_acc = 100/te_q * sum(delta_te);

    niter = size(wk, 2);                            % size of wk
    if isd == 7
        niter = k + 1;
    end
    tex = toc;
    
    fprintf(' \n Final  [uo_nn_solve.m]\n\n');
    %fprintf(' Inici plot\n');
    % uo_nn_Xyplot(Xtr, ytr, wo);
end

